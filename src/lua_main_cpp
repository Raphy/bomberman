#include <cstdlib>
#include <exception>
#include <iostream>

#include "API/Me.hh"
#include "API/Manager.hh"
#include "Lua/Script.hh"

int main(int argc, char** argv)
{
  if (argc == 1)
    {
      std::cerr << "Usage: " << argv[0] << " <script lua>" << std::endl;
      return (EXIT_FAILURE);
    }

  try
    {
      std::cout << "[CPP] Making Script" << std::endl;
      Lua::Script ia(argv[1]);

      std::cout << "[CPP] Getting API::Manager" << std::endl;
      API::Manager& api_manager = API::Manager::getInstance();
      
      std::cout << "[CPP] Registering script" << std::endl;
      api_manager.registerScript(ia);

      API::Me* udata = new API::Me("Raphy", 44.22, 11.66);
      ia.getVirtualMachine().setClass<API::Me>("luaL_Me", "me", udata);
 
      std::cout << "[CPP] Executing the script" << std::endl;
      if (!ia.execute())
	std::cerr << "[LUA ERROR Exec] " << ia.getVirtualMachine().getError() << std::endl;

      ia.getVirtualMachine().set<int>("x", 21);
      ia.getVirtualMachine().set<std::string>("str", "toto");

      std::cout << "[CPP] initialization()" << std::endl;
      if (!ia.initialization())
	std::cerr << "[LUA ERROR] " << ia.getVirtualMachine().getError() << std::endl;
      
      std::cout << "[CPP] play()" << std::endl;
      if (!ia.play())
	std::cerr << "[LUA ERROR] " << ia.getVirtualMachine().getError() << std::endl;

      int x = ia.getVirtualMachine().get<int>("x");

      std::cout << "[CPP] x=" << x << std::endl;

      udata = ia.getVirtualMachine().getClass<API::Me>("me");

      std::cout << "[CPP] me.y =" << udata->getY() << std::endl;

      std::cout << "[CPP] try end" << std::endl;

    }
  catch (std::exception* ex)
    {
      std::cerr << "[EXCEPTION] " << ex->what() << std::endl;
      return (EXIT_FAILURE);
    }

  std::cout << "[CPP] end" << std::endl;

  return EXIT_SUCCESS;
}
